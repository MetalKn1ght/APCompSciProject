import java.awt.*;
import java.awt.event.*;
import javax.swing.OverlayLayout;
import java.awt.GridLayout;
import java.util.ArrayList;
import javax.swing.*;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;

/* 
 * @author (Jason W,Michael Bagamian) 
 * @version (6/3/17)
 */
public class FinalRunner
{
    private static final int FRAME_WIDTH = 3000;
    private static final int FRAME_HEIGHT = 1000;

    private static ArrayList<BalloonGUI>  balloonList = new ArrayList<BalloonGUI>();
    private static ArrayList<String> balloonLetters = new ArrayList<String>();

    private static int balloonCount = 0;
    private static long startTime;
    private static long stopTime;

    public static void main(String[] args)
    { 
        //Creates the Frame and the Pane
        JFrame frame = new JFrame();
        JPanel pane = new JPanel();
        JPanel panelOver = new JPanel();
        JPanel paneFirst = new JPanel();

        //Title
        JTextArea title=new JTextArea("Welcome to the Balloon Game!");
        title.setBounds(1100,200,400,50);
        //create new Font
        Font font = new Font("Arial", Font.BOLD,25);

        //set font for JTextField
        title.setFont(font);

        //Creates the Balloon Spanwer, Spikes, and Bar
        PlayerStatus player = new PlayerStatus();
        SpikeBarBackgroundGUI sBB = new SpikeBarBackgroundGUI();

        //Adds the very first balloon onto the list of balloons called balloonList
        for(int n=0;n<8;n++)
        {
            int x = (int) (Math.random() * (100 - 30) + 30+100*(n+1));
            balloonList.add(new BalloonGUI(x,400));
        }

        //Modifies the JFrame and paneFirst
        paneFirst.setLayout(null);
        paneFirst.setBackground(Color.red);
        JFrame frameFirst = new JFrame("Welcome to the Balloon Game!");
        frameFirst.setVisible(true);
        frameFirst.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frameFirst.setSize(FRAME_WIDTH, FRAME_HEIGHT);

        //Creates buttons objects        
        JButton play = new JButton("Moderate");
        JButton play2 = new JButton("Difficult");
        play.setBounds(1100,500,200,100);
        play2.setBounds(1450,500,200,100);

        //Adds components to beginning screen
        paneFirst.add(play);
        paneFirst.add(play2);
        paneFirst.add(title);
        frameFirst.add(paneFirst);     

        class Action implements ActionListener
        {
            public void actionPerformed(ActionEvent e)
            {
                //starts time in the game
                startTime = System.currentTimeMillis();
                //Lays out how the frame will look like
                LayoutManager overlay = new OverlayLayout(pane);
                pane.setLayout(overlay);

                //sets the look of the game frame
                frame.setSize(FRAME_WIDTH, FRAME_HEIGHT);
                frame.setTitle("Balloons Moving");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);       
                frame.setVisible(true);

                //Adds spikes and balloon onto the panel
                pane.add(balloonList.get(balloonCount));
                pane.add(balloonList.get(balloonCount+1));
                pane.add(balloonList.get(balloonCount+2));
                pane.add(balloonList.get(balloonCount+3));
                pane.add(balloonList.get(balloonCount+4));
                pane.add(balloonList.get(balloonCount+5));
                pane.add(balloonList.get(balloonCount+6));
                pane.add(balloonList.get(balloonCount+7));
                pane.add(sBB); 
                frame.add(pane);
                //Focuses panel on keylistener
                pane.setFocusable(true);
                pane.requestFocusInWindow();
                pane.setFocusTraversalKeysEnabled(false);

                //sets background on game frame
                frame.setBackground(Color.blue);

                //moving and adding balloons
                class BalloonMovingListener implements ActionListener
                {
                    public void actionPerformed(ActionEvent event)
                    {   
                        //moves balloons up by 1
                        balloonList.get(balloonCount).moveBy(0,1);
                        balloonList.get(balloonCount+1).moveBy(0,1);
                        balloonList.get(balloonCount+2).moveBy(0,1);
                        balloonList.get(balloonCount+3).moveBy(0,1);
                        balloonList.get(balloonCount+4).moveBy(0,1);
                        balloonList.get(balloonCount+5).moveBy(0,1);
                        balloonList.get(balloonCount+6).moveBy(0,1);
                        balloonList.get(balloonCount+7).moveBy(0,1);
                        frame.repaint();

                        //at the bottom of the spikes
                        if(balloonList.get(balloonCount).getY()==13)
                        {
                            //adds balloons for respawn
                            for(int n=0;n<8;n++)
                            {
                                int x = (int) (Math.random() * (100 - 30) + 30+100*(n+1));
                                balloonList.add(new BalloonGUI(x,400));
                            }

                            //"pops" the balloon to make it invisible
                            for(int num=0;num<balloonList.size()-8;num++)
                            {
                                balloonList.get(num).setVisible(false);
                            }
                            balloonCount=balloonCount+8;

                            //adds respawned balloons to game panel
                            pane.add(balloonList.get(balloonCount));
                            pane.add(balloonList.get(balloonCount+1));
                            pane.add(balloonList.get(balloonCount+2));
                            pane.add(balloonList.get(balloonCount+3));
                            pane.add(balloonList.get(balloonCount+4));
                            pane.add(balloonList.get(balloonCount+5));
                            pane.add(balloonList.get(balloonCount+6));
                            pane.add(balloonList.get(balloonCount+7));
                            frame.setBackground(Color.gray);

                        }          
                        //keeps track of time throughout this action
                        stopTime = System.currentTimeMillis();
                    }
                }   

                //How the game responds to player pressing the keyboard letters is defined here (one method used)
                class Keys implements KeyListener
                {
                    public void keyPressed(KeyEvent e)
                    {
                    }                                           

                    public void keyTyped(KeyEvent e)
                    {
                    }

                    //if correct key is released within the drawn rectangle, the balloon will "pop" 
                    public void keyReleased(KeyEvent e)
                    {
                        int num=balloonCount;                       
                        while(num<balloonList.size())
                        {
                            //locates balloon within rectangle and tries to find matching key released
                            if(balloonList.get(num).getY()+100>=55 && balloonList.get(num).getY()+100<=175 &&  e.getKeyCode() == KeyEvent.getExtendedKeyCodeForChar(balloonList.get(num).getLetter().charAt(0)))
                            {
                                balloonList.get(num).setVisible(false); //"pops" balloon
                                player.setScore(); //adds point for "popped" balloon
                            }                          
                            num++;          
                        }
                        //game ends after reaching _ points, the challenge is to get the best time
                        if(player.getScore()==50)
                        {                                                        
                            pane.setVisible(false); //sets game panel invisible                                                                        
                            frame.getContentPane().add(panelOver); //adds game over panel as main panel
                            panelOver.setBackground(Color.pink);
                            JTextArea textArea = new JTextArea("You have scored "+player.getScore()+" points in "
                                    +(stopTime-startTime)/1000+" seconds. To play again, restart runner method :)",5, 20); //Description of balloon achievements
                            panelOver.add(textArea); 
                            textArea.setBounds(1100,200,400,20);
                            Font font = new Font("Arial", Font.BOLD,30);
                            textArea.setFont(font);
                            textArea.setEditable(false);
                            //to reset game you must run main method again
                        }
                    }
                }

                //Creates TimerListener Objects
                ActionListener listener=new BalloonMovingListener();
                //game panel adds keylistener
                pane.addKeyListener(new Keys());

                //delay or interval that the balloon moves (relates to balloon speed)
                int Delay = 10;

                //Creates Timer Object
                Timer t2 = new Timer(Delay, listener);

                //Starts the BalloonMoving Action 
                t2.start();
            }
        }

        //Moderate game mode 
        class Action2 implements ActionListener
        {
            public void actionPerformed(ActionEvent e)
            {
                ArrayList<Balloon>  balloonList = new ArrayList<Balloon>();
                ArrayList<String> balloonLetters = new ArrayList<String>();

                int[] balloonYCoordList = {440, 480, 540, 555, 580, 620, 660, 700, 720, 740, 780, 800, 830, 860, 890, 900, 910, 910, 915, 920};

                PlayerStatus player = new PlayerStatus();
                SpikeBarBackgroundGUI sBB = new SpikeBarBackgroundGUI();

                //Creates Balloons and adds them onto a list
                for(int i = 0; i < 20; i++)
                {
                    balloonList.add(new Balloon(balloonYCoordList[i]));
                }

                //Adds the assigned Letter from each balloon to an ArrayList of type String called balloonLetters. 
                for(int i = 0; i < balloonList.size(); i++)
                {
                    balloonLetters.add(balloonList.get(i).getLetter());
                }

                //Lays out how the frame will look like
                LayoutManager overlay = new OverlayLayout(pane);
                pane.setLayout(overlay);

                //Adds the Pane onto the Frame
                frame.setSize(FRAME_WIDTH, FRAME_HEIGHT);
                frame.add(pane);
                frame.setTitle("Balloons Moving");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);       
                frame.setVisible(true);

                //Adds the balloons onto the screen
                for(int i = 0; i < balloonList.size(); i++)
                {
                    pane.add(balloonList.get(i));
                }
                //Adds spikes and balloon onto the panel
                pane.add(sBB); 

                //Focuses panel on keylistener
                pane.setFocusable(true);
                pane.requestFocusInWindow();
                pane.setFocusTraversalKeysEnabled(false);

                //Imports the background image and adds it onto the panel
                ImageIcon imageIcon = new ImageIcon("images.jpg"); //url: http://bhstorm.com/beautiful-sky-wallpapers-mobile/
                Image imag = imageIcon.getImage();
                Image img2 = imag.getScaledInstance(FRAME_WIDTH,FRAME_HEIGHT, java.awt.Image.SCALE_SMOOTH); 
                ImageIcon img = new ImageIcon(img2);
                JLabel image = new JLabel(img);

                //Moves the image to the back
                pane.add(image,BorderLayout.CENTER);

                //Balloons are mobing up here (NOTE: Working, but needs to be modified for working BalloonSpawningListener)
                class BalloonMovingListener implements ActionListener
                {
                    public void actionPerformed(ActionEvent event)
                    {
                        //Maves all the balloons
                        for(int i = 0; i < balloonList.size(); i++)
                        {
                            balloonList.get(i).moveBy(1);
                            balloonList.get(i).setVisible(true);
                            frame.repaint();
                        }

                        for(int i = 0; i < balloonList.size(); i++)
                        {
                            //If the balloon has not yet been popped and has hit the spikes, player loses health and a new balloon is made
                            if(balloonList.get(i).getY() == 13 && balloonList.get(i).isPopped() == false)
                            {   
                                //Player loses health
                                player.setHealth();

                                //Removes the balloon
                                pane.remove(balloonList.get(i));

                                //Resents the balloon
                                balloonList.get(i).reset(balloonYCoordList[i]);
                                balloonList.get(i).setPopped(false);

                                //Replace the previous balloon with a new balloon with new location and letter
                                balloonLetters.set(i, balloonList.get(i).getLetter());

                                //Add the balloon onto the screen and put the imported image to the background
                                pane.add(balloonList.get(i));
                                pane.add(image,BorderLayout.CENTER);

                                //Turn the balloon's visibility on
                                balloonList.get(i).setVisible(true);

                                //Repaint the frame
                                frame.repaint();
                            }

                            //If balloon has reached the spikes and has been popped
                            if(balloonList.get(i).getY() == 13 && balloonList.get(i).isPopped() == true)
                            {
                                //Removes balloon from screen
                                pane.remove(balloonList.get(i));
                                
                                //Resets the balloon
                                balloonList.get(i).reset(balloonYCoordList[i]);
                                balloonList.get(i).setPopped(false);

                                //Replace the previous balloon with a new balloon with new location and letter
                                balloonLetters.set(i, balloonList.get(i).getLetter());

                                //Add the balloon onto the screen and put the imported image to the background
                                pane.add(balloonList.get(i));
                                pane.add(image,BorderLayout.CENTER);

                                //Turns the balloon's visibility on
                                balloonList.get(i).setVisible(true);

                                //Repaint the frame
                                frame.repaint();
                            }

                            //If the cycle ends, we restart it
                            if(i == balloonList.size())
                                i = 0;

                            //Shows end result
                            if(player.getHealth() <= 0)
                            {
                                for(int j = 0; j < balloonList.size(); j++)
                                {
                                    balloonList.get(j).setVisible(false);
                                }
                                JOptionPane.showMessageDialog(frame, "You scored " + player.getScore() + ".");
                                System.exit(0);
                            }
                        }
                    }
                }

                //How the game responds to player pressing the keyboard letters is defined here
                class Keys implements KeyListener
                {
                    public void keyPressed(KeyEvent e)
                    {
                        //If key pressed DOES correspond with the assigned balloon letter, the player earns point and the balloon is popped
                        for(int i = 0; i < balloonList.size(); i++)
                        {
                            //Adds score and removes them if balloon is on screen
                            if(e.getKeyCode() == KeyEvent.getExtendedKeyCodeForChar(balloonLetters.get(i).charAt(0)))
                            {
                                player.setScore();
                                pane.remove(balloonList.get(i));
                                balloonList.get(i).setPopped(true);
                                frame.repaint();
                            }

                            //Restarts the cyble
                            if(i == balloonList.size())
                                i = 0;
                        }
                    }

                    public void keyTyped(KeyEvent e)
                    {
                    }

                    public void keyReleased(KeyEvent e)
                    {
                    }
                }

                //Creates TimerListener Objects
                ActionListener listener = new BalloonMovingListener();
                pane.addKeyListener(new Keys());

                //Dealy for 10ms
                int Delay = 8;

                //Creates Timer Objects
                Timer t2 = new Timer(Delay, listener);

                //Starts the BalloonMoving Action and BalloonSpawning Action
                t2.start();
            }
        }

        //Plays the difficult version
        play.addActionListener(new Action2());
        
        //Plays the Moderate version
        play2.addActionListener(new Action());
    }
}
