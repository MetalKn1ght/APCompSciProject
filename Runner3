
import java.awt.*;
import java.awt.event.*;
import javax.swing.OverlayLayout;
import java.awt.GridLayout;
import java.util.ArrayList;
import javax.swing.*;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
/**
 * Write a description of class Runner here.
 * 
 * @author (Michael Bagamian) 
 * @version (6/3/17)
 */
public class Runner4
{
    private static final int FRAME_WIDTH = 3000;
    private static final int FRAME_HEIGHT = 1000;
    private static ArrayList<BalloonGUI>  balloonList = new ArrayList<BalloonGUI>();
    private static ArrayList<String> balloonLetters = new ArrayList<String>();
    private static int balloonCount = 0;
    private static PlayerStatus player=new  PlayerStatus();
    private static long startTime;
    private static long stopTime;
    public static void main(String[] args)
    { 
        //Creates the Frame and the Pane
        JFrame frame = new JFrame();
        JPanel pane = new JPanel();
        JPanel panelOver=new JPanel();
        //Creates the Balloon Spanwer, Spikes, and Bar
        PlayerStatus player = new PlayerStatus();
        SpikeBarBackgroundGUI sBB = new SpikeBarBackgroundGUI();

        //Adds the very first balloon onto the list of balloons called balloonList
        for(int n=0;n<8;n++)
        {
            int x = (int) (Math.random() * (100 - 30) + 30+100*(n+1));
            balloonList.add(new BalloonGUI(x,400));
        }
        balloonLetters.add(balloonList.get(balloonCount).getLetter());

        //Modifies the JFrame and 
        JFrame frameFirst = new JFrame("Welcome to the Balloon Game!");
        frameFirst.setVisible(true);
        frameFirst.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frameFirst.setSize(FRAME_WIDTH, FRAME_HEIGHT);

        //Creates buttons objects
        JPanel paneFirst = new JPanel();
        JButton play = new JButton("Difficult");
        JButton play2 = new JButton("Moderate");
        JButton tutorial = new JButton("How To Play");

        paneFirst.add(play);

        paneFirst.add(tutorial);
        frameFirst.add(paneFirst);     

        class Action implements ActionListener
        {
            public void actionPerformed(ActionEvent e)
            {

                //Lays out how the frame will look like
                LayoutManager overlay = new OverlayLayout(pane);
                pane.setLayout(overlay);

                //sets the look of the game frame
                frame.setSize(FRAME_WIDTH, FRAME_HEIGHT);
                frame.setTitle("Balloons Moving");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);       
                frame.setVisible(true);

                //Adds spikes and balloon onto the panel
                pane.add(balloonList.get(balloonCount));
                pane.add(balloonList.get(balloonCount+1));
                pane.add(balloonList.get(balloonCount+2));
                pane.add(balloonList.get(balloonCount+3));
                pane.add(balloonList.get(balloonCount+4));
                pane.add(balloonList.get(balloonCount+5));
                pane.add(balloonList.get(balloonCount+6));
                pane.add(balloonList.get(balloonCount+7));
                pane.add(sBB); 
                frame.add(pane);
                //Focuses panel on keylistener
                pane.setFocusable(true);
                pane.requestFocusInWindow();
                pane.setFocusTraversalKeysEnabled(false);
                System.out.println(balloonList.get(balloonCount).getLetter());
                //sets background on game frame
                frame.setBackground(Color.blue);

                //moving and adding balloons
                class BalloonMovingListener implements ActionListener
                {
                    public void actionPerformed(ActionEvent event)
                    {   
                        //starts time in the game
                        startTime = System.currentTimeMillis();
                        //moves balloons up by 1
                        balloonList.get(balloonCount).moveBy(0,1);
                        balloonList.get(balloonCount+1).moveBy(0,1);
                        balloonList.get(balloonCount+2).moveBy(0,1);
                        balloonList.get(balloonCount+3).moveBy(0,1);
                        balloonList.get(balloonCount+4).moveBy(0,1);
                        balloonList.get(balloonCount+5).moveBy(0,1);
                        balloonList.get(balloonCount+6).moveBy(0,1);
                        balloonList.get(balloonCount+7).moveBy(0,1);
                        frame.repaint();
                        //at the bottom of the spikes
                        if(balloonList.get(balloonCount).getY()==13)
                        {
                            //adds balloons for respawn
                            for(int n=0;n<8;n++)
                            {
                                int x = (int) (Math.random() * (100 - 30) + 30+100*(n+1));
                                balloonList.add(new BalloonGUI(x,400));
                            }
                            //"pops" the balloon to make it invisible
                            for(int num=0;num<balloonList.size()-8;num++)
                            {
                                balloonList.get(num).setVisible(false);
                            }
                            balloonCount=balloonCount+8;
                            //adds respawned balloons to game panel
                            pane.add(balloonList.get(balloonCount));
                            pane.add(balloonList.get(balloonCount+1));
                            pane.add(balloonList.get(balloonCount+2));
                            pane.add(balloonList.get(balloonCount+3));
                            pane.add(balloonList.get(balloonCount+4));
                            pane.add(balloonList.get(balloonCount+5));
                            pane.add(balloonList.get(balloonCount+6));
                            pane.add(balloonList.get(balloonCount+7));
                            frame.setBackground(Color.gray);
                            //keeps track of time throughout this action
                            stopTime = System.currentTimeMillis();

                        }          

                    }
                }   

                //How the game responds to player pressing the keyboard letters is defined here (one method used)
                class Keys implements KeyListener
                {
                    public void keyPressed(KeyEvent e)
                    {

                    }                                           

                    public void keyTyped(KeyEvent e)
                    {

                    }
                    //if correct key is released within the drawn rectangle, the balloon will "pop" 
                    public void keyReleased(KeyEvent e)
                    {
                        int num=balloonCount;                       
                        while(num<balloonList.size())
                        {
                            //locates balloon within rectangle and tries to find matching key released
                            if(balloonList.get(num).getY()+100>=55 && balloonList.get(num).getY()+100<=175 &&  e.getKeyCode() == KeyEvent.getExtendedKeyCodeForChar(balloonList.get(num).getLetter().charAt(0)))
                            {
                                balloonList.get(num).setVisible(false); //"pops" balloon
                                player.setScore(); //adds point for "popped" balloon
                            }                          
                            num++;          
                        }
                        //game ends after reaching _ points, the challenge is to get the best time
                        if(player.getScore()==5)
                        {                                                        
                            pane.setVisible(false); //sets game panel invisible
                            frame.getContentPane().add(panelOver); //adds game over panel as main panel
                            JTextArea textArea = new JTextArea("You have scored "+player.getScore()+" points in "
                                    +(startTime-stopTime)/1000+" seconds. To play again, restart runner method",5, 20); //Description of balloon achievements
                            panelOver.add(textArea); 
                            textArea.setEditable(false);
                            //to reset game you must run main mehod again
                        }
                    }
                }

                //Creates TimerListener Objects
                ActionListener listener=new BalloonMovingListener();
                //game panel adds keylistener
                pane.addKeyListener(new Keys());

                //delay or interval that the balloon moves (relates to balloon speed)
                int Delay = 10;

                //Creates Timer Object
                Timer t2 = new Timer(Delay, listener);

                //Starts the BalloonMoving Action 
                t2.start();

            }
        }
        play.addActionListener(new Action());

    }

}
