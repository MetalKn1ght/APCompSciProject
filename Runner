import java.awt.*;
import java.awt.event.*;
import javax.swing.OverlayLayout;
import java.awt.GridLayout;
import java.util.ArrayList;
import javax.swing.*;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;

/**
 * Write a description of class Runner here.
 * 
 * @author (Michael Bagamian) 
 * @version (5/24/17)
 */
public class Runner
{
    private static final int FRAME_WIDTH = 3000;
    private static final int FRAME_HEIGHT = 1000;
    private static ArrayList<BalloonGUI>  balloonList = new ArrayList<BalloonGUI>();
    private static ArrayList<String> balloonLetters = new ArrayList<String>();
    private static int[] balloonYCoordList = {440, 470, 500, 530, 560, 590, 620, 650, 680, 710, 740};
    private static int balloonCount = 0;
    private static int balloonYCoord = 450;

    public static void main(String[] args)
    { 
        //Creates the Frame and the Pane
        JFrame frame = new JFrame();
        JPanel pane = new JPanel();

        //Creates the Balloon Spanwer, Spikes, and Bar
        PlayerStatus player = new PlayerStatus();
        SpikeBarBackgroundGUI sBB = new SpikeBarBackgroundGUI();
        BalloonGUI balloon1 = new BalloonGUI(440);
        BalloonGUI balloon2 = new BalloonGUI(470);
        BalloonGUI balloon3 = new BalloonGUI(500);
        BalloonGUI balloon4 = new BalloonGUI(530);
        BalloonGUI balloon5 = new BalloonGUI(560);
        BalloonGUI balloon6 = new BalloonGUI(590);
        BalloonGUI balloon7 = new BalloonGUI(620);
        BalloonGUI balloon8 = new BalloonGUI(650);
        BalloonGUI balloon9 = new BalloonGUI(680);
        BalloonGUI balloon10 = new BalloonGUI(710);
        BalloonGUI balloon11 = new BalloonGUI(740);

        balloonLetters.add(balloon1.getLetter());
        balloonLetters.add(balloon2.getLetter());
        balloonLetters.add(balloon3.getLetter());
        balloonLetters.add(balloon4.getLetter());
        balloonLetters.add(balloon5.getLetter());
        balloonLetters.add(balloon6.getLetter());
        balloonLetters.add(balloon7.getLetter());
        balloonLetters.add(balloon8.getLetter());
        balloonLetters.add(balloon9.getLetter());
        balloonLetters.add(balloon10.getLetter());
        balloonLetters.add(balloon11.getLetter());

        //Adds the very first balloon onto the list of balloons called balloonList
        balloonList.add(balloon1);
        balloonList.add(balloon2);
        balloonList.add(balloon3);
        balloonList.add(balloon4);
        balloonList.add(balloon5);
        balloonList.add(balloon6);
        balloonList.add(balloon7);
        balloonList.add(balloon8);
        balloonList.add(balloon9);
        balloonList.add(balloon10);
        balloonList.add(balloon11);

        //Modifies the JFrame and 
        JFrame frameFirst = new JFrame("Welcome to the Balloon Game!");
        frameFirst.setVisible(true);
        frameFirst.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frameFirst.setSize(FRAME_WIDTH, FRAME_HEIGHT);

        //Creates buttons objects
        JPanel paneFirst = new JPanel();
        JButton playGame = new JButton("Play Now");
        JButton tutorial = new JButton("How To Play");
        ////////paneFirst.setLayout(new OverlayLayout(paneFirst));

        //Adds buttons objects to the screen
        paneFirst.add(playGame);

        //paneFirst.add(tutorial);
        frameFirst.add(paneFirst);     

        System.out.println(balloonLetters);
        class Action implements ActionListener
        {
            public void actionPerformed(ActionEvent e)
            {
                String letter = balloon1.getLetter();
                char let = letter.charAt(0);

                //Lays out how the frame will look like
                LayoutManager overlay = new OverlayLayout(pane);
                pane.setLayout(overlay);

                //Adds the Pane onto the Frame
                frame.setSize(FRAME_WIDTH, FRAME_HEIGHT);
                frame.add(pane);
                frame.setTitle("Balloons Moving");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);       
                frame.setVisible(true);

                //Adds spikes and balloon onto the panel
                pane.add(balloon1);
                pane.add(balloon2);
                pane.add(balloon3);
                pane.add(balloon4);
                pane.add(balloon5);
                pane.add(balloon6);
                pane.add(balloon7);
                pane.add(balloon8);
                pane.add(balloon9);
                pane.add(balloon10);
                pane.add(balloon11);
                pane.add(sBB); 

                //Focuses panel on keylistener
                pane.setFocusable(true);
                pane.requestFocusInWindow();
                pane.setFocusTraversalKeysEnabled(false);

                //Imports the background image and adds it onto the panel
                ImageIcon imageIcon = new ImageIcon("images.jpg"); //url: http://bhstorm.com/beautiful-sky-wallpapers-mobile/
                Image imag = imageIcon.getImage();
                Image img2 = imag.getScaledInstance(FRAME_WIDTH,FRAME_HEIGHT, java.awt.Image.SCALE_SMOOTH); 
                ImageIcon img = new ImageIcon(img2);
                JLabel image = new JLabel(img);

                //Moves the image to the back
                pane.add(image,BorderLayout.CENTER);

                //Balloons are mobing up here (NOTE: Working, but needs to be modified for working BalloonSpawningListener)
                class BalloonMovingListener implements ActionListener
                {
                    public void actionPerformed(ActionEvent event)
                    {

                        balloon1.moveBy(0,1);
                        balloon2.moveBy(0,1);
                        balloon3.moveBy(0,1);
                        balloon4.moveBy(0,1);
                        balloon5.moveBy(0,1);
                        balloon6.moveBy(0,1);
                        balloon7.moveBy(0,1);
                        balloon8.moveBy(0,1);
                        balloon9.moveBy(0,1);
                        balloon10.moveBy(0,1);
                        balloon11.moveBy(0,1);
                        frame.repaint();

                        for(int i = 0; i < balloonList.size(); i++)
                        {
                            if(balloonList.get(i).getY() == 13)
                            {     
                                int rdmLetterNum = (int) (Math.random() * 26);
                                int rdmXCoord = (int) (Math.random() * (900 - 30)) + 30;
                                balloonList.get(i).setVisible(false);
                                balloonList.get(i).setY(balloonYCoordList[i]);
                                balloonList.get(i).setX(rdmXCoord);
                                balloonList.get(i).setLetter(rdmLetterNum);
                                pane.add(balloonList.get(i));
                                balloonList.get(i).setVisible(true);
                                player.setHealth();
                                pane.add(image,BorderLayout.CENTER);
                                frame.repaint();
                            }

                            if(i == balloonList.size())
                                i = 0;

                            if(player.getHealth() <= 0)
                            {
                               balloonList.get(i).setVisible(false);
                            }
                        }
                    }
                }
                
                //How the game responds to player pressing the keyboard letters is defined here
                class Keys implements KeyListener
                {
                    public void keyPressed(KeyEvent e)
                    {
                        //If key pressed DOES correspond with the assigned balloon letter, the player earns point and the balloon is popped
                        for(int i = 0; i < balloonList.size(); i++)
                        {
                            if(balloonList.get(i).getY() > 13 && balloonList.get(i).getY() <= 68 && e.getKeyCode() == KeyEvent.getExtendedKeyCodeForChar(balloonLetters.get(i).charAt(0)))
                            {
                                pane.remove(balloonList.get(i));
                                player.setScore();
                                frame.repaint();
                            }

                            if(balloonList.get(i).getY() > 13 && balloonList.get(i).getY() < 68 && e.getKeyCode() != KeyEvent.getExtendedKeyCodeForChar(balloonLetters.get(i).charAt(0)))
                            {
                                player.setHealth();
                            }

                            if(i == balloonList.size())
                                i = 0;
                        }

                        System.out.println(player.getScore() + " " + player.getHealth());
                    }

                    public void keyTyped(KeyEvent e)
                    {

                    }

                    public void keyReleased(KeyEvent e)
                    {
                    }
                }

                //Creates TimerListener Objects

                ActionListener listener = new BalloonMovingListener();

                pane.addKeyListener(new Keys());

                // Random millisecond from 20 to 100 for balloon speed
                int Delay = 15;

                // Constant balloon spawning speed (One every 500 millisecond)
                //final int BALLOON_SPAWING_SPEED = 500; 

                //Creates Timer Objects
                //Timer t = new Timer(BALLOON_SPAWING_SPEED, balloonSpawner);
                Timer t2 = new Timer(Delay, listener);

                //Starts the BalloonMoving Action and BalloonSpawning Action
                t2.start();
            }
        }

        playGame.addActionListener(new Action());
    }
}

