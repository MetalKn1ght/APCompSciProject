import java.awt.*;
import java.awt.event.*;
import javax.swing.OverlayLayout;
import java.awt.GridLayout;
import java.util.ArrayList;
import javax.swing.*;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;

/**
 * Write a description of class Runner here.
 * 
 * @author (Michael Bagamian) 
 * @version (5/24/17)
 */
public class Runner3
{
    private static final int FRAME_WIDTH = 3000;
    private static final int FRAME_HEIGHT = 1000;
    private static ArrayList<BalloonGUI>  balloonList = new ArrayList<BalloonGUI>();
    private static ArrayList<String> balloonLetters = new ArrayList<String>();
    private static int balloonCount = 0;

    public static void main(String[] args)
    { 
        //Creates the Frame and the Pane
        JFrame frame = new JFrame();
        JPanel pane = new JPanel();

        //Creates the Balloon Spanwer, Spikes, and Bar
        PlayerStatus player = new PlayerStatus();
        SpikeBarBackgroundGUI sBB = new SpikeBarBackgroundGUI();
        BalloonGUI firstBalloon = new BalloonGUI(150);
        BalloonGUI balloon2 = new BalloonGUI(200);
        BalloonGUI balloon3 = new BalloonGUI(210);
        BalloonGUI balloon4 = new BalloonGUI(230);
        BalloonGUI balloon5 = new BalloonGUI(225);
        BalloonGUI balloon6 = new BalloonGUI(215);
        BalloonGUI balloon7 = new BalloonGUI(220);
        BalloonGUI balloon8 = new BalloonGUI(217);
        BalloonGUI balloon9 = new BalloonGUI(170);
        BalloonGUI balloon10 = new BalloonGUI(160);
        BalloonGUI balloon11 = new BalloonGUI(165);

        ballooLetters.add(balloon2.getLetter());
        ballooLetters.add(balloon3.getLetter());
        ballooLetters.add(balloon4.getLetter());
        ballooLetters.add(balloon5.getLetter());
        ballooLetters.add(balloon6.getLetter());
        ballooLetters.add(balloon7.getLetter());

        //Adds the very first balloon onto the list of balloons called balloonList
        balloonList.add(firstBalloon);
        balloonLetters.add(balloonList.get(balloonCount).getLetter());

        //Modifies the JFrame and 
        JFrame frameFirst = new JFrame("Welcome to the Balloon Game!");
        frameFirst.setVisible(true);
        frameFirst.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frameFirst.setSize(FRAME_WIDTH, FRAME_HEIGHT);

        //Creates buttons objects
        JPanel paneFirst = new JPanel();
        JButton playGame = new JButton("Play Now");
        JButton tutorial = new JButton("How To Play");
        ////////paneFirst.setLayout(new OverlayLayout(paneFirst));

        //Adds buttons objects to the screen
        paneFirst.add(playGame);

        //paneFirst.add(tutorial);
        frameFirst.add(paneFirst);     

        class Action implements ActionListener
        {
            public void actionPerformed(ActionEvent e)
            {
                String letter = firstBalloon.getLetter();
                char let = letter.charAt(0);

                //Lays out how the frame will look like
                LayoutManager overlay = new OverlayLayout(pane);
                pane.setLayout(overlay);

                //Adds the Pane onto the Frame
                frame.setSize(FRAME_WIDTH, FRAME_HEIGHT);
                frame.add(pane);
                frame.setTitle("Balloons Moving");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);       
                frame.setVisible(true);

                //Adds spikes and balloon onto the panel
                pane.add(firstBalloon);
                pane.add(sBB); 

                //Focuses panel on keylistener
                pane.setFocusable(true);
                pane.requestFocusInWindow();
                pane.setFocusTraversalKeysEnabled(false);

                //Imports the background image and adds it onto the panel
                ImageIcon imageIcon = new ImageIcon("images.jpg"); //url: http://bhstorm.com/beautiful-sky-wallpapers-mobile/
                Image imag = imageIcon.getImage();
                Image img2 = imag.getScaledInstance(FRAME_WIDTH,FRAME_HEIGHT, java.awt.Image.SCALE_SMOOTH); 
                ImageIcon img = new ImageIcon(img2);
                JLabel image = new JLabel(img);

                //Moves the image to the back
                pane.add(image,BorderLayout.CENTER);

                System.out.println(player.getHealth() + " " + player.getScore());

                //Balloons are mobing up here (NOTE: Working, but needs to be modified for working BalloonSpawningListener)
                class BalloonMovingListener implements ActionListener
                {
                    public void actionPerformed(ActionEvent event)
                    {
                        firstBalloon.moveBy(0,1);
                        balloon2.moveBy(0,1):
                        balloon3.moveBy(0,1):
                        balloon4.moveBy(0,1):
                        balloon5.moveBy(0,1):
                        balloon6.moveBy(0,1):
                        balloon7.moveBy(0,1):
                        frame.repaint();
                    }
                }

                //Balloons are being created here (NOTE: Not working ATM)
                class BalloonSpawningListener implements ActionListener
                {
                    public void actionPerformed(ActionEvent event)
                    {
                        BalloonGUI balloons = new BalloonGUI(150);
                        balloonLetters.add(balloons.getLetter());
                        balloonList.add(balloons);       
                        balloonCount++;
                    }
                }

                //How the game responds to player pressing the keyboard letters is defined here
                class Keys implements KeyListener
                {
                    public void keyPressed(KeyEvent e)
                    {
                        //If key pressed DOES correspond with the assigned balloon letter, the player earns point and the balloon is popped
                        if(firstBalloon.getY() >= 13 && firstBalloon.getY() <= 75 &&  e.getKeyCode() == KeyEvent.getExtendedKeyCodeForChar(let))
                        {
                            pane.remove(balloonList.get(0));
                            player.setScore();
                            frame.repaint();
                        }
                    }

                    public void keyTyped(KeyEvent e)
                    {

                    }

                    public void keyReleased(KeyEvent e)
                    {
                        //If the key pressed DOES NOT correspond to the assigned balloon letter, then player loses healt
                        if(e.getKeyCode() != KeyEvent.getExtendedKeyCodeForChar(let) || !(firstBalloon.getY()+100 >= 75 && firstBalloon.getY()+100 <= 175) && player.getHealth() > 0)
                            player.setHealth();

                        //If health is 0 or lower, then game removes balloon
                        if(player.getHealth() <= 0)
                            pane.remove(balloonList.get(0));

                        System.out.println(player.getHealth());

                    }
                }

                //Creates TimerListener Objects
                ActionListener balloonSpawner = new BalloonSpawningListener();
                ActionListener listener = new BalloonMovingListener();

                pane.addKeyListener(new Keys());

                // Random millisecond from 20 to 100 for balloon speed
                int Delay = 25;

                // Constant balloon spawning speed (One every 500 millisecond)
                final int BALLOON_SPAWING_SPEED = 500; 

                //Creates Timer Objects
                Timer t = new Timer(BALLOON_SPAWING_SPEED, balloonSpawner);
                Timer t2 = new Timer(Delay, listener);

                //Starts the BalloonMoving Action and BalloonSpawning Action

                t.start();
                t2.start();
            }

        }

        playGame.addActionListener(new Action());
    }
}
